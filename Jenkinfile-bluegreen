pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'balaakashreddyy/argon-web'
        KUBECONFIG_CREDENTIALS = 'kubeconfig'
        DOCKER_CREDENTIALS = 'dockerhub-credentials'
    }

    stages {
        stage('Checkout Code') {
            steps {
                echo "üì¶ Checking out source code..."
                git url: 'https://github.com/AkashReddy123/argon-design-system.git', branch: 'main'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Alternate between blue and green
                    def color = (env.BUILD_NUMBER.toInteger() % 2 == 0) ? 'green' : 'blue'
                    env.COLOR = color
                    env.IMAGE_TAG = "${DOCKER_IMAGE}:${color}"
                    echo "üöÄ Building Docker image for ${color} environment..."
                    sh "docker build -t ${IMAGE_TAG} ."
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    echo "üîë Logging in and pushing image to Docker Hub..."
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS}", usernameVariable: 'USER', passwordVariable: 'PASS')]) {
                        sh '''
                            echo "$PASS" | docker login -u "$USER" --password-stdin
                            docker push ${IMAGE_TAG}
                        '''
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    withCredentials([file(credentialsId: "${KUBECONFIG_CREDENTIALS}", variable: 'KUBECONFIG')]) {
                        echo "üöÄ Deploying ${COLOR} version to Kubernetes..."
                        sh '''
                            kubectl set image deployment/argon-${COLOR} argon-web=${IMAGE_TAG} --record || \
                            kubectl apply -f k8s/deployment-${COLOR}.yaml
                            kubectl rollout status deployment/argon-${COLOR}
                            kubectl patch service argon-bluegreen-service -p "{\"spec\":{\"selector\":{\"app\":\"argon-web\",\"version\":\"${COLOR}\"}}}"
                            echo "‚úÖ Traffic switched to ${COLOR} version!"
                        '''
                    }
                }
            }
        }

        stage('Verification') {
            steps {
                echo "üîç Verifying deployment for ${COLOR} version..."
                sh "kubectl get pods -l version=${COLOR}"
            }
        }

        stage('Cleanup Old Version') {
            steps {
                script {
                    def oldColor = (env.COLOR == 'blue') ? 'green' : 'blue'
                    echo "üßπ Cleaning up old ${oldColor} deployment..."
                    sh "kubectl delete deployment argon-${oldColor} || true"
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ Blue-Green deployment successful!"
        }
        failure {
            echo "‚ùå Deployment failed. Check the Jenkins logs for details."
        }
    }
}
