pipeline {
    agent any

    environment {
        IMAGE_REPO = "balaakashreddyy/argon-web"     // Your Docker Hub repo
        DOCKER_CRED = "dockerhub-credentials"        // Jenkins credentials ID for Docker Hub
        KUBECONFIG_CRED = "kubeconfig"               // Jenkins Secret file for kubeconfig.yaml
        KUBECTL_IMAGE = "bitnami/kubectl:latest"     // Light kubectl image
        KUBECTL_TLS = "--insecure-skip-tls-verify=true"
    }

    options {
        timeout(time: 30, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '5'))
        ansiColor('xterm')
    }

    stages {
        stage('Checkout Code') {
            steps {
                echo 'üì¶ Checking out source code...'
                git branch: 'main', url: 'https://github.com/AkashReddy123/argon-design-system.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    def tag = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
                    env.IMAGE_TAG = "${IMAGE_REPO}:${tag}"
                    echo "üê≥ Building Docker image: ${env.IMAGE_TAG}"
                    sh "docker build -t ${env.IMAGE_TAG} ."
                }
            }
        }

        stage('Push to DockerHub') {
            steps {
                script {
                    echo 'üöÄ Logging in & pushing image to DockerHub...'
                    withCredentials([usernamePassword(credentialsId: env.DOCKER_CRED, usernameVariable: 'USER', passwordVariable: 'PASS')]) {
                        sh """
                            echo \$PASS | docker login -u \$USER --password-stdin
                            docker push ${env.IMAGE_TAG}
                            docker logout
                        """
                    }
                }
            }
        }

        stage('Blue-Green Deploy to Kubernetes') {
            steps {
                script {
                    // Access kubeconfig secret file
                    withCredentials([file(credentialsId: env.KUBECONFIG_CRED, variable: 'KCFG')]) {

                        // Detect which version is active
                        def activeColor = sh(
                            script: """
                                docker run --rm \
                                    -v \$KCFG:/root/.kube/config:ro \
                                    ${env.KUBECTL_IMAGE} \
                                    kubectl ${env.KUBECTL_TLS} get svc argon-service -o=jsonpath='{.spec.selector.version}' || echo blue
                            """,
                            returnStdout: true
                        ).trim()

                        def newColor = (activeColor == "blue") ? "green" : "blue"
                        def deployFile = "k8s/deployment-${newColor}.yaml"
                        echo "‚ò∏Ô∏è Deploying ${newColor} version with image ${env.IMAGE_TAG}"

                        // Replace image placeholder
                        sh "sed -i 's|__IMAGE_PLACEHOLDER__|${env.IMAGE_TAG}|g' ${deployFile}"

                        // Apply deployment
                        sh """
                            docker run --rm \
                                -v \$PWD:/workdir \
                                -v \$KCFG:/root/.kube/config:ro \
                                ${env.KUBECTL_IMAGE} \
                                kubectl ${env.KUBECTL_TLS} apply -f /workdir/${deployFile}
                        """

                        // Switch service to new version
                        sh """
                            docker run --rm \
                                -v \$KCFG:/root/.kube/config:ro \
                                ${env.KUBECTL_IMAGE} \
                                kubectl ${env.KUBECTL_TLS} patch svc argon-service \
                                -p '{"spec": {"selector": {"app": "argon-web", "version": "${newColor}"}}}'
                        """

                        // Rollout verification
                        sh """
                            docker run --rm \
                                -v \$KCFG:/root/.kube/config:ro \
                                ${env.KUBECTL_IMAGE} \
                                kubectl ${env.KUBECTL_TLS} rollout status deployment/argon-${newColor} --timeout=120s
                        """

                        env.OLD_COLOR = activeColor
                        env.NEW_COLOR = newColor
                    }
                }
            }
        }

        stage('Verification') {
            steps {
                echo 'üîç Verifying new deployment...'
                withCredentials([file(credentialsId: env.KUBECONFIG_CRED, variable: 'KCFG')]) {
                    sh """
                        docker run --rm \
                            -v \$KCFG:/root/.kube/config:ro \
                            ${env.KUBECTL_IMAGE} \
                            kubectl ${env.KUBECTL_TLS} get pods -o wide
                    """

                    sh """
                        docker run --rm \
                            -v \$KCFG:/root/.kube/config:ro \
                            ${env.KUBECTL_IMAGE} \
                            kubectl ${env.KUBECTL_TLS} get svc argon-service -o yaml
                    """
                }
            }
        }

        stage('Cleanup Old Version') {
            when {
                expression { return env.OLD_COLOR && (env.OLD_COLOR == "blue" || env.OLD_COLOR == "green") }
            }
            steps {
                script {
                    echo "üßπ Cleaning up old deployment: argon-${env.OLD_COLOR}"
                    withCredentials([file(credentialsId: env.KUBECONFIG_CRED, variable: 'KCFG')]) {
                        sh """
                            docker run --rm \
                                -v \$KCFG:/root/.kube/config:ro \
                                ${env.KUBECTL_IMAGE} \
                                kubectl ${env.KUBECTL_TLS} delete deployment argon-${env.OLD_COLOR} --ignore-not-found
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'üéâ Blue-Green Deployment Successful!'
        }
        failure {
            echo '‚ùå Deployment failed. Check Jenkins logs for details.'
        }
    }
}
