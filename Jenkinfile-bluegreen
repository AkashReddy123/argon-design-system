pipeline {
    agent any

    environment {
        REGISTRY = "balaakashreddyy"
        IMAGE_NAME = "argon-web"
        BLUE_DEPLOYMENT = "deployment-blue"
        GREEN_DEPLOYMENT = "deployment-green"
        SERVICE_NAME = "argon-service"
    }

    options {
        timestamps()
    }

    stages {
        stage('Preparation') {
            steps {
                ansiColor('xterm') {
                    echo "‚úÖ Starting Blue-Green Deployment Pipeline"
                }
                checkout scm
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    GIT_COMMIT_HASH = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    IMAGE_TAG = "${REGISTRY}/${IMAGE_NAME}:${GIT_COMMIT_HASH}"
                    echo "Building Docker image: ${IMAGE_TAG}"
                    sh "docker build -t ${IMAGE_TAG} ."
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-cred', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh '''
                        echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                        docker push ${IMAGE_TAG}
                        '''
                    }
                }
            }
        }

        stage('Deploy to Kubernetes (Green)') {
            steps {
                script {
                    echo "Deploying new image to GREEN environment"
                    sh """
                    sed 's|__IMAGE__|${IMAGE_TAG}|g' k8s/deployment-green.yaml | kubectl apply -f -
                    kubectl rollout status deployment/${GREEN_DEPLOYMENT}
                    """
                }
            }
        }

        stage('Health Check (Green)') {
            steps {
                script {
                    echo "Performing health check on GREEN..."
                    sh '''
                    kubectl get pods -l version=green
                    sleep 10
                    '''
                }
            }
        }

        stage('Switch Traffic to Green') {
            steps {
                script {
                    echo "Switching service traffic from BLUE ‚Üí GREEN"
                    sh """
                    kubectl patch svc ${SERVICE_NAME} -p '{"spec":{"selector":{"app":"argon-web","version":"green"}}}'
                    """
                }
            }
        }

        stage('Cleanup Old Blue') {
            steps {
                script {
                    echo "Cleaning up old BLUE deployment..."
                    sh "kubectl delete deployment ${BLUE_DEPLOYMENT} || true"
                }
            }
        }
    }

    post {
        success {
            echo "üéâ Blue-Green Deployment Successful!"
        }
        failure {
            echo "‚ùå Deployment Failed ‚Äî Reverting traffic to BLUE"
            sh """
            kubectl patch svc ${SERVICE_NAME} -p '{"spec":{"selector":{"app":"argon-web","version":"blue"}}}'
            """
        }
    }
}
