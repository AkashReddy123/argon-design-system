pipeline {
    agent any

    environment {
        DOCKERHUB_USER = credentials('dockerhub-user')
        PASS = credentials('dockerhub-pass')
        KUBECONFIG = credentials('kube-config')  // optional if using Jenkins credential
    }

    stages {

        stage('Checkout Code') {
            steps {
                echo 'üì¶ Checking out source code...'
                git 'https://github.com/AkashReddy123/argon-design-system.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo 'üöÄ Building Docker image for green environment...'
                    sh 'docker build -t balaakashreddyy/argon-web:green .'
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    echo 'üîë Logging in and pushing image to Docker Hub...'
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'USER', passwordVariable: 'PASS')]) {
                        sh '''
                        echo $PASS | docker login -u $USER --password-stdin
                        docker push balaakashreddyy/argon-web:green
                        '''
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    echo 'üöÄ Deploying green version to Kubernetes...'
                    withCredentials([file(credentialsId: 'kube-config', variable: 'KUBECONFIG')]) {
                        // ‚ö†Ô∏è Added flags to skip TLS verification (for Docker Desktop/Minikube only)
                        sh '''
                        kubectl set image deployment/argon-green argon-web=balaakashreddyy/argon-web:green --record --insecure-skip-tls-verify=true
                        kubectl apply -f k8s/deployment-green.yaml --validate=false --insecure-skip-tls-verify=true
                        '''
                    }
                }
            }
        }

        stage('Verification') {
            when { expression { currentBuild.resultIsBetterOrEqualTo('SUCCESS') } }
            steps {
                echo '‚úÖ Green version deployed successfully. Running verification...'
                sh 'kubectl get pods --insecure-skip-tls-verify=true'
            }
        }

        stage('Cleanup Old Version') {
            when { expression { currentBuild.resultIsBetterOrEqualTo('SUCCESS') } }
            steps {
                echo 'üßπ Cleaning up old blue deployment...'
                sh 'kubectl delete deployment argon-blue --ignore-not-found --insecure-skip-tls-verify=true'
            }
        }
    }

    post {
        success {
            echo 'üéâ Blue-Green deployment completed successfully!'
        }
        failure {
            echo '‚ùå Deployment failed. Check the Jenkins logs for details.'
        }
    }
}
