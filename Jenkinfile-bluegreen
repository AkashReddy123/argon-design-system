pipeline {
    agent any

    environment {
        // Docker image repo (update if needed)
        DOCKER_REPO = "balaakashreddyy/argon-web"
        // Kubeconfig secret file ID in Jenkins
        KUBECONFIG_CREDENTIAL_ID = 'kubeconfig'
    }

    stages {
        stage('Checkout Code') {
            steps {
                echo "üì¶ Checking out source code..."
                checkout scm
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Generate a unique color tag for blue or green deployment
                    def randomNum = new Random().nextInt(2)
                    COLOR = randomNum == 0 ? "blue" : "green"
                    IMAGE_TAG = "${DOCKER_REPO}:${COLOR}"

                    echo "üöÄ Building Docker image for ${COLOR} environment..."
                    sh "docker build -t ${IMAGE_TAG} ."
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    echo "üîë Logging in and pushing image to Docker Hub..."
                    withCredentials([usernamePassword(
                        credentialsId: 'dockerhub',  // Make sure this matches your Jenkins credential ID
                        usernameVariable: 'USER',
                        passwordVariable: 'PASS'
                    )]) {
                        sh '''
                            echo $PASS | docker login -u $USER --password-stdin
                            docker push ${DOCKER_REPO}:${COLOR}
                        '''
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    echo "‚ò∏Ô∏è Deploying ${COLOR} version to Kubernetes..."

                    withCredentials([file(credentialsId: "${KUBECONFIG_CREDENTIAL_ID}", variable: 'KUBECONFIG_FILE')]) {
                        sh '''
                            export KUBECONFIG=$KUBECONFIG_FILE

                            # Create separate deployments for blue and green
                            cat <<EOF | kubectl apply -f -
                            apiVersion: apps/v1
                            kind: Deployment
                            metadata:
                              name: argon-${COLOR}-deployment
                            spec:
                              replicas: 1
                              selector:
                                matchLabels:
                                  app: argon-${COLOR}
                              template:
                                metadata:
                                  labels:
                                    app: argon-${COLOR}
                                spec:
                                  containers:
                                  - name: argon-${COLOR}
                                    image: ${DOCKER_REPO}:${COLOR}
                                    ports:
                                    - containerPort: 80
                            EOF

                            # Create or update service (points to currently active color)
                            kubectl apply -f - <<EOF
                            apiVersion: v1
                            kind: Service
                            metadata:
                              name: argon-web-service
                            spec:
                              selector:
                                app: argon-${COLOR}
                              ports:
                                - protocol: TCP
                                  port: 80
                                  targetPort: 80
                            EOF
                        '''
                    }
                }
            }
        }

        stage('Verification') {
            steps {
                echo "üîç Verifying deployment..."
                sh '''
                    kubectl get pods -l app=argon-${COLOR}
                    kubectl get svc argon-web-service
                '''
            }
        }

        stage('Cleanup Old Version') {
            steps {
                script {
                    echo "üßπ Cleaning up old deployments..."
                    sh '''
                        export KUBECONFIG=$KUBECONFIG_FILE
                        if [ "${COLOR}" = "blue" ]; then
                            kubectl delete deployment argon-green-deployment --ignore-not-found=true
                        else
                            kubectl delete deployment argon-blue-deployment --ignore-not-found=true
                        fi
                    '''
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ Blue-Green deployment completed successfully!"
        }
        failure {
            echo "‚ùå Deployment failed. Check the Jenkins logs for details."
        }
    }
}
