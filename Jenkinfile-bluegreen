pipeline {
    agent any

    environment {
        IMAGE_REPO = "balaakashreddyy/argon-web"
        DOCKER_CRED = "dockerhub-credentials"
        KUBECONFIG_CRED = "kubeconfig"
        KUBECTL_IMAGE = "bitnami/kubectl:latest"
        KUBECTL_TLS = "--insecure-skip-tls-verify=true"
    }

    options {
        timeout(time: 30, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '5'))
    }

    stages {
        stage('Checkout Code') {
            steps {
                wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'xterm']) {
                    echo 'üì¶ Checking out source code...'
                    git branch: 'main', url: 'https://github.com/AkashReddy123/argon-design-system.git'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'xterm']) {
                    script {
                        def tag = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
                        env.IMAGE_TAG = "${IMAGE_REPO}:${tag}"
                        echo "üê≥ Building Docker image: ${env.IMAGE_TAG}"
                        sh "docker build -t ${env.IMAGE_TAG} ."
                    }
                }
            }
        }

        stage('Push to DockerHub') {
            steps {
                wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'xterm']) {
                    script {
                        echo 'üöÄ Logging in & pushing image to DockerHub...'
                        withCredentials([usernamePassword(credentialsId: env.DOCKER_CRED, usernameVariable: 'USER', passwordVariable: 'PASS')]) {
                            sh """
                                echo \$PASS | docker login -u \$USER --password-stdin
                                docker push ${env.IMAGE_TAG}
                                docker logout
                            """
                        }
                    }
                }
            }
        }

        stage('Blue-Green Deploy to Kubernetes') {
            steps {
                wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'xterm']) {
                    script {
                        withCredentials([file(credentialsId: env.KUBECONFIG_CRED, variable: 'KCFG')]) {
                            def activeColor = sh(
                                script: """
                                    docker run --rm \
                                        -v \$KCFG:/root/.kube/config:ro \
                                        ${env.KUBECTL_IMAGE} \
                                        kubectl ${env.KUBECTL_TLS} get svc argon-service -o=jsonpath='{.spec.selector.version}' || echo blue
                                """,
                                returnStdout: true
                            ).trim()

                            def newColor = (activeColor == "blue") ? "green" : "blue"
                            def deployFile = "k8s/deployment-${newColor}.yaml"
                            echo "‚ò∏Ô∏è Deploying ${newColor} version with image ${env.IMAGE_TAG}"

                            sh "sed -i 's|__IMAGE_PLACEHOLDER__|${env.IMAGE_TAG}|g' ${deployFile}"

                            // Deploy new version
                            sh """
                                docker run --rm \
                                    -v \$PWD:/workdir \
                                    -v \$KCFG:/root/.kube/config:ro \
                                    ${env.KUBECTL_IMAGE} \
                                    kubectl ${env.KUBECTL_TLS} apply -f /workdir/${deployFile}
                            """

                            // Switch service
                            sh """
                                docker run --rm \
                                    -v \$KCFG:/root/.kube/config:ro \
                                    ${env.KUBECTL_IMAGE} \
                                    kubectl ${env.KUBECTL_TLS} patch svc argon-service \
                                    -p '{"spec": {"selector": {"app": "argon-web", "version": "${newColor}"}}}'
                            """

                            // Rollout check
                            sh """
                                docker run --rm \
                                    -v \$KCFG:/root/.kube/config:ro \
                                    ${env.KUBECTL_IMAGE} \
                                    kubectl ${env.KUBECTL_TLS} rollout status deployment/argon-${newColor} --timeout=120s
                            """

                            env.OLD_COLOR = activeColor
                            env.NEW_COLOR = newColor
                        }
                    }
                }
            }
        }

        stage('Verification') {
            steps {
                wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'xterm']) {
                    echo 'üîç Verifying new deployment...'
                    withCredentials([file(credentialsId: env.KUBECONFIG_CRED, variable: 'KCFG')]) {
                        sh """
                            docker run --rm \
                                -v \$KCFG:/root/.kube/config:ro \
                                ${env.KUBECTL_IMAGE} \
                                kubectl ${env.KUBECTL_TLS} get pods -o wide
                        """

                        sh """
                            docker run --rm \
                                -v \$KCFG:/root/.kube/config:ro \
                                ${env.
