pipeline {
    agent any

    environment {
        IMAGE_REPO = "balaakashreddyy/argon-web"
        DOCKER_CRED = "dockerhub-credentials"
        KUBECONFIG = credentials('kubeconfig')
    }

    stages {
        stage('Checkout Code') {
            steps {
                echo 'üì¶ Checking out source code...'
                git branch: 'main', url: 'https://github.com/AkashReddy123/argon-design-system.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    def tag = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
                    env.IMAGE_TAG = "${IMAGE_REPO}:${tag}"
                    echo "üê≥ Building Docker image: ${env.IMAGE_TAG}"
                    sh "docker build -t ${env.IMAGE_TAG} ."
                }
            }
        }

        stage('Push to DockerHub') {
            steps {
                script {
                    echo 'üöÄ Logging in & pushing image to DockerHub...'
                    withCredentials([usernamePassword(credentialsId: env.DOCKER_CRED, usernameVariable: 'USER', passwordVariable: 'PASS')]) {
                        sh """
                            echo \$PASS | docker login -u \$USER --password-stdin
                            docker push ${env.IMAGE_TAG}
                        """
                    }
                }
            }
        }

        stage('Blue-Green Deploy to Kubernetes') {
            steps {
                script {
                    def activeColor = sh(
                        script: "kubectl --kubeconfig=\$KUBECONFIG get svc argon-service -o=jsonpath='{.spec.selector.version}' || echo blue",
                        returnStdout: true
                    ).trim()
                    // default to blue if service or selector is missing
                    def newColor = (activeColor == "blue") ? "green" : "blue"
                    def deployFile = "k8s/deployment-${newColor}.yaml"

                    echo "‚ò∏Ô∏è Deploying ${newColor} version with image ${env.IMAGE_TAG}"

                    // Replace image placeholder in deployment YAML
                    sh "sed -i 's|__IMAGE_PLACEHOLDER__|${env.IMAGE_TAG}|g' ${deployFile}"

                    // Apply the new deployment (create or update)
                    sh "kubectl --kubeconfig=\$KUBECONFIG apply -f ${deployFile}"

                    // Flip the service to point to the new color
                    sh """
                        kubectl --kubeconfig=\$KUBECONFIG patch svc argon-service -p '{"spec": {"selector": {"app": "argon-web", "version": "${newColor}"}}}'
                    """

                    // Optional pause to allow rollout/switch
                    sh "kubectl --kubeconfig=\$KUBECONFIG rollout status deployment/argon-${newColor} --timeout=120s"
                    
                    // Save to env for cleanup
                    env.OLD_COLOR = activeColor
                    env.NEW_COLOR = newColor
                }
            }
        }

        stage('Verification') {
            steps {
                echo 'üîç Verifying new deployment...'
                sh 'kubectl --kubeconfig=$KUBECONFIG get pods -o wide'
                sh 'kubectl --kubeconfig=$KUBECONFIG get svc argon-service -o yaml'
            }
        }

        stage('Cleanup Old Version') {
            when {
                expression {
                    return env.OLD_COLOR && (env.OLD_COLOR == "blue" || env.OLD_COLOR == "green")
                }
            }
            steps {
                script {
                    echo "üßπ Cleaning up old deployment: argon-${env.OLD_COLOR}"
                    sh "kubectl --kubeconfig=$KUBECONFIG delete deployment argon-${env.OLD_COLOR} --ignore-not-found"
                }
            }
        }
    }

    post {
        success {
            echo 'üéâ Blue-Green Deployment Successful!'
        }
        failure {
            echo '‚ùå Deployment failed. Check Jenkins logs for details.'
        }
    }
}
